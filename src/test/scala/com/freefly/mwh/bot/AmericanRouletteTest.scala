package com.freefly.mwh.bot

import org.scalatest.{FlatSpec, GivenWhenThen, Matchers}

class AmericanRouletteTest extends FlatSpec with Matchers with GivenWhenThen {
  private val rouletteNumberSupplierName: String = classOf[RouletteNumberSupplier].getSimpleName
  private var nextNumber = Int.MinValue

  val ar = new AmericanRoulette(new RouletteNumberSupplier {
    override def next(): Int = nextNumber
  })

  private def rollMocked(bids: Seq[RouletteBid] = Nil, n: Int): RollResult = {
    nextNumber = n
    ar.roll(bids)
  }

  private def rollMocked(n: Int, bids: RouletteBid*): RollResult = {
    rollMocked(bids, n)
  }

  "Roll method" should s"return value generated by $rouletteNumberSupplierName" in {
    rollMocked(0).number shouldEqual 0

    rollMocked(7).number shouldEqual 7
  }

  it should s"throw exception when $rouletteNumberSupplierName provides incorrect values" in {
    assertThrows[IllegalStateException]{
      rollMocked(-2)
    }

    assertThrows[IllegalStateException]{
      rollMocked(37)
    }

    assertThrows[IllegalStateException]{
      rollMocked(4354)
    }

    assertThrows[IllegalStateException]{
      rollMocked(-4354)
    }
  }

  it should "calculate won sum correctly for " in {
    def testWonSum(rolledNumber: Int, expectedWonSum: Int, bids: (Int, BidCell)*): Unit = {
      var rBids = scala.collection.immutable.List[RouletteBid]()

      bids.foreach(bid => {
        Given(s"$$${bid._1} on ${bid._2}")
        rBids = RouletteBid(bid._1, bid._2) :: rBids
      })

      When(s"rolled $rolledNumber")
      Then(s"win sum $$$expectedWonSum")

      if (rollMocked(rBids, rolledNumber).winAmount != expectedWonSum) {
        val callContext = Thread.currentThread().getStackTrace.apply(2)

        val ccErrorDetails = callContext.getFileName + ":" + callContext.getLineNumber

        fail(s"Incorrect sum calculation, details: ($ccErrorDetails)")
      }
    }

    testWonSum(0, 3600, 100 -> Number(0))
    testWonSum(1, 0, 100 -> Number(0))

    testWonSum(2, 200, 100 -> Even)
    testWonSum(3, 0, 100 -> Even)

    testWonSum(3, 200, 100 -> Odd)
    testWonSum(2, 0, 100 -> Odd)

    testWonSum(9, 200, 100 -> OneToEighteen)
    testWonSum(33, 0, 100 -> OneToEighteen)

    testWonSum(33, 200, 100 -> NineteenToThirtySix)
    testWonSum(1, 0, 100 -> NineteenToThirtySix)

    testWonSum(1, 200, 100 -> Red)
    testWonSum(2, 0, 100 -> Red)

    testWonSum(2, 200, 100 -> Black)
    testWonSum(1, 0, 100 -> Black)

    testWonSum(1, 400, 100 -> OneToEighteen, 100 -> Red)
  }

  it should "calculate bids sum correctly" in {
    rollMocked(10).bidsSum shouldEqual 0

    rollMocked(10, RouletteBid(100, Even)).bidsSum shouldEqual 100

    rollMocked(10, RouletteBid(100, Even), RouletteBid(200, Odd)).bidsSum shouldEqual 300

    rollMocked(10, RouletteBid(100, Number(1)), RouletteBid(200, Odd), RouletteBid(200, DoubleZero)).bidsSum shouldEqual 500
  }

}
